cmake_minimum_required(VERSION 3.6)

project(server)

set(CMAKE_CXX_STANDARD 20)

set(SOURCE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/source/)
set(SHADER_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/shaders/)
set(EXTERN_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/extern)
set(SHARED_DIRECTORY ${PARENT_DIRECTORY}/shared/)
set(GLEW_DIRECTORY ${EXTERN_DIRECTORY}/glew)
set(GLFW_DIRECTORY ${EXTERN_DIRECTORY}/glfw)
set(GLM_DIRECTORY ${EXTERN_DIRECTORY}/glm)
set(ASSIMP_DIRECTORY ${EXTERN_DIRECTORY}/assimp)
set(NVENC_DIRECTORY ${EXTERN_DIRECTORY}/nvenc)
set(CUDART_DIRECTORY ${EXTERN_DIRECTORY}/cudart)
set(VOLK_DIRECTORY ${EXTERN_DIRECTORY}/volk)
set(STB_DIRECTORY ${EXTERN_DIRECTORY}/stb)
set(GLI_DIRECTORY ${EXTERN_DIRECTORY}/gli)
set(CGAL_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/extern/cgal)
set(BOOST_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/extern/boost)
set(OPENEXR_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/extern/openexr)
set(IMATH_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/extern/imath)

# GLFW Settings
set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)

# GLEW Settings
set(ONLY_LIBS ON CACHE BOOL "" FORCE)
set(glew-cmake_BUILD_SHARED OFF CACHE BOOL "" FORCE)

# Assimp Settings
set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_ALL_EXPORTERS_BY_DEFAULT OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(ASSIMP_INSTALL OFF CACHE BOOL "" FORCE)

# Volk Settings
if (WIN32)
   set(VOLK_STATIC_DEFINES VK_USE_PLATFORM_WIN32_KHR)
endif()

# GLI Settings
set(GLI_TEST_ENABLE OFF CACHE BOOL "" FORCE)

add_subdirectory(${SHARED_DIRECTORY})
add_subdirectory(${GLFW_DIRECTORY})
add_subdirectory(${GLEW_DIRECTORY})
add_subdirectory(${ASSIMP_DIRECTORY})
add_subdirectory(${VOLK_DIRECTORY})
add_subdirectory(${GLI_DIRECTORY})
add_subdirectory(${BOOST_DIRECTORY})
add_subdirectory(${OPENEXR_DIRECTORY})
add_subdirectory(${IMATH_DIRECTORY})

file(GLOB_RECURSE SOURCE_FILES ${SOURCE_DIRECTORY}*.cpp)
file(GLOB_RECURSE HEADER_FILES ${SOURCE_DIRECTORY}*.hpp)

add_executable(server ${SOURCE_FILES} ${HEADER_FILES})

add_compile_definitions(SHADER_DIRECTORY="${SHADER_DIRECTORY}")

find_package(OpenGL REQUIRED)

target_link_libraries(server stream_server)
target_link_libraries(server OpenGL::GL)
target_link_libraries(server glfw)
target_link_libraries(server libglew_static)
target_link_libraries(server assimp::assimp)
target_link_libraries(server volk)
target_link_libraries(server gli)
target_link_libraries(server OpenEXR::OpenEXR)

if(MSVC)
    target_link_libraries(server ${CUDART_DIRECTORY}/lib/x64/cuda.lib)
    target_compile_definitions(server PRIVATE NOMINMAX)
else()
    find_package(CUDAToolkit REQUIRED)
    target_link_libraries(server CUDA::cudart_static CUDA::cuda_driver)
endif()

target_include_directories(server PRIVATE ${SOURCE_DIRECTORY})
target_include_directories(server PRIVATE ${GLM_DIRECTORY})
target_include_directories(server PRIVATE ${NVENC_DIRECTORY})
target_include_directories(server PRIVATE ${CUDART_DIRECTORY}/include)
target_include_directories(server PRIVATE ${VOLK_DIRECTORY})
target_include_directories(server PRIVATE ${STB_DIRECTORY})

#CGAL Library
file(GLOB CGAL_LIBRARY_PACKAGES RELATIVE ${CGAL_DIRECTORY} "${CGAL_DIRECTORY}/*")
list(REMOVE_ITEM CGAL_LIBRARY_PACKAGES .svn .git .reuse)

foreach(package ${CGAL_LIBRARY_PACKAGES})
    if(IS_DIRECTORY "${CGAL_DIRECTORY}/${package}")
        if(EXISTS "${CGAL_DIRECTORY}/${package}/package_info/${package}/maintainer")
            target_include_directories(server PUBLIC "${CGAL_DIRECTORY}/${package}/include")
        endif()
    endif()
endforeach()

#Moudles required by the CGAL Library
target_link_libraries(server Boost::config)
target_link_libraries(server Boost::container)
target_link_libraries(server Boost::iterator)
target_link_libraries(server Boost::mpl)
target_link_libraries(server Boost::foreach)
target_link_libraries(server Boost::variant)
target_link_libraries(server Boost::random)
target_link_libraries(server Boost::property_map)
target_link_libraries(server Boost::tuple)
target_link_libraries(server Boost::math)
target_link_libraries(server Boost::algorithm)
target_link_libraries(server Boost::multiprecision)
target_link_libraries(server Boost::type_traits)
target_link_libraries(server Boost::graph)

if(MSVC)
    set_property(GLOBAL PROPERTY USE_FOLDERS ON)
    
    source_group("Source" REGULAR_EXPRESSION ${SOURCE_DIRECTORY}*)
    source_group("Source/Mesh Generator" REGULAR_EXPRESSION ${SOURCE_DIRECTORY}mesh_generator/*)
    
    set_target_properties(glfw PROPERTIES FOLDER "Extern")
    set_target_properties(uninstall PROPERTIES FOLDER "Extern")
    set_target_properties(update_mappings PROPERTIES FOLDER "Extern")
    set_target_properties(libglew_static PROPERTIES FOLDER "Extern")
    set_target_properties(assimp PROPERTIES FOLDER "Extern")
    set_target_properties(UpdateAssimpLibsDebugSymbolsAndDLLs PROPERTIES FOLDER "Extern")
    set_target_properties(zlibstatic PROPERTIES FOLDER "Extern")
    set_target_properties(volk PROPERTIES FOLDER "Extern")
    set_target_properties(fmt PROPERTIES FOLDER "Extern")
    set_target_properties(spdlog PROPERTIES FOLDER "Extern")
    set_target_properties(uWebSockets PROPERTIES FOLDER "Extern")
    set_target_properties(uv_a PROPERTIES FOLDER "Extern")
    set_target_properties(gli_dummy PROPERTIES FOLDER "Extern")
    set_target_properties(boost_assert PROPERTIES FOLDER "Extern")
    set_target_properties(boost_atomic PROPERTIES FOLDER "Extern")
    set_target_properties(boost_chrono PROPERTIES FOLDER "Extern")
    set_target_properties(boost_container PROPERTIES FOLDER "Extern")
    set_target_properties(boost_context PROPERTIES FOLDER "Extern")
    set_target_properties(boost_contract PROPERTIES FOLDER "Extern")
    set_target_properties(boost_core PROPERTIES FOLDER "Extern")
    set_target_properties(boost_coroutine PROPERTIES FOLDER "Extern")
    set_target_properties(boost_date_time PROPERTIES FOLDER "Extern")
    set_target_properties(boost_exception PROPERTIES FOLDER "Extern")
    set_target_properties(boost_fiber PROPERTIES FOLDER "Extern")
    set_target_properties(boost_fiber_numa PROPERTIES FOLDER "Extern")
    set_target_properties(boost_filesystem PROPERTIES FOLDER "Extern")
    set_target_properties(boost_graph PROPERTIES FOLDER "Extern")
    set_target_properties(boost_iostreams PROPERTIES FOLDER "Extern")
    set_target_properties(boost_json PROPERTIES FOLDER "Extern")
    set_target_properties(boost_locale PROPERTIES FOLDER "Extern")
    set_target_properties(boost_log PROPERTIES FOLDER "Extern")
    set_target_properties(boost_log_setup PROPERTIES FOLDER "Extern")
    set_target_properties(boost_nowide PROPERTIES FOLDER "Extern")
    set_target_properties(boost_prg_exec_monitor PROPERTIES FOLDER "Extern")
    set_target_properties(boost_program_options PROPERTIES FOLDER "Extern")
    set_target_properties(boost_random PROPERTIES FOLDER "Extern")
    set_target_properties(boost_serialization PROPERTIES FOLDER "Extern")
    set_target_properties(boost_stacktrace_basic PROPERTIES FOLDER "Extern")
    set_target_properties(boost_stacktrace_noop PROPERTIES FOLDER "Extern")
    set_target_properties(boost_stacktrace_windbg PROPERTIES FOLDER "Extern")
    set_target_properties(boost_stacktrace_windbg_cached PROPERTIES FOLDER "Extern")
    set_target_properties(boost_system PROPERTIES FOLDER "Extern")
    set_target_properties(boost_test_exec_monitor PROPERTIES FOLDER "Extern")
    set_target_properties(boost_thread PROPERTIES FOLDER "Extern")
    set_target_properties(boost_timer PROPERTIES FOLDER "Extern")
    set_target_properties(boost_type_erasure PROPERTIES FOLDER "Extern")
    set_target_properties(boost_unit_test_framework PROPERTIES FOLDER "Extern")
    set_target_properties(boost_url PROPERTIES FOLDER "Extern")
    set_target_properties(boost_variant2 PROPERTIES FOLDER "Extern")
    set_target_properties(boost_wave PROPERTIES FOLDER "Extern")
    set_target_properties(boost_wserialization PROPERTIES FOLDER "Extern")
	set_target_properties(exr2aces PROPERTIES FOLDER "Extern")
	set_target_properties(exrcheck PROPERTIES FOLDER "Extern")
	set_target_properties(exrenvmap PROPERTIES FOLDER "Extern")
	set_target_properties(exrheader PROPERTIES FOLDER "Extern")
	set_target_properties(exrinfo PROPERTIES FOLDER "Extern")
	set_target_properties(exrmakepreview PROPERTIES FOLDER "Extern")
	set_target_properties(exrmaketiled PROPERTIES FOLDER "Extern")
	set_target_properties(exrmultipart PROPERTIES FOLDER "Extern")
	set_target_properties(exrmultiview PROPERTIES FOLDER "Extern")
	set_target_properties(exrstdattr PROPERTIES FOLDER "Extern")
	set_target_properties(Iex PROPERTIES FOLDER "Extern")
	set_target_properties(IlmThread PROPERTIES FOLDER "Extern")
	set_target_properties(Imath PROPERTIES FOLDER "Extern")
	set_target_properties(OpenEXR PROPERTIES FOLDER "Extern")
	set_target_properties(OpenEXRCore PROPERTIES FOLDER "Extern")
	set_target_properties(OpenEXRExamples PROPERTIES FOLDER "Extern")
	set_target_properties(OpenEXRUtil PROPERTIES FOLDER "Extern")
endif()
