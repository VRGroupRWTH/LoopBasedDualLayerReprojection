#version 430
#extension GL_NV_gpu_shader5 : require

#include "shared_defines.glsl"
#include "shared_math_library.glsl"

layout(local_size_x = SCENE_INDIRECT_OPACITY_WORK_GROUP_SIZE_X, local_size_y = SCENE_INDIRECT_OPACITY_WORK_GROUP_SIZE_Y, local_size_z = SCENE_INDIRECT_OPACITY_WORK_GROUP_SIZE_Z) in;

layout(binding = 0, rgba8) uniform writeonly image3D opacity_buffer;

layout(binding = 0) uniform usampler3D visibility_x_buffer;
layout(binding = 1) uniform usampler3D visibility_y_buffer;
layout(binding = 2) uniform usampler3D visibility_z_buffer;

uniform uvec3 scene_indirect_cell_count;

float compute_opacity(uint visibility, uint axis)
{
    uint opacity = 0;

    for(uint offset_x = 0; offset_x < 3; offset_x++)
    {
        for(uint offset_y = 0; offset_y < 3; offset_y++)
        {
            for(uint offset_z = 0; offset_z < 3; offset_z++)
            {
                uint visibility_offset = offset_x * 9 + offset_y * 3 + offset_z;
                uint opacity_offset = 0;

                if(axis == 0)
                {
                    opacity_offset = offset_y * 3 + offset_z;
                }

                else if(axis == 1)
                {
                    opacity_offset = offset_x * 3 + offset_z;
                }

                else if(axis == 2)
                {
                    opacity_offset = offset_x * 3 + offset_y;
                }

                opacity |= ((visibility >> visibility_offset) & 0x01) << opacity_offset;
            }   
        }  
    }

    return bitCount(opacity) / 9.0;
}

void main()
{
    ivec3 cell_coord = ivec3(gl_GlobalInvocationID);

    if (is_outside_volume(cell_coord, ivec3(scene_indirect_cell_count)))
    {
        return;
    }

    uint visibility_x = texelFetch(visibility_x_buffer, cell_coord, 0).x;
    uint visibility_y = texelFetch(visibility_y_buffer, cell_coord, 0).x;
    uint visibility_z = texelFetch(visibility_z_buffer, cell_coord, 0).x;

    vec3 opacity = vec3(0.0);
    opacity.x = compute_opacity(visibility_x, 0);
    opacity.y = compute_opacity(visibility_y, 1);
    opacity.z = compute_opacity(visibility_z, 2);

    imageStore(opacity_buffer, cell_coord, vec4(opacity, 0.0));
}