#version 430
#extension GL_NV_gpu_shader5 : require

#include "shared_defines.glsl"
#include "shared_math_library.glsl"

layout(local_size_x = QUAD_GENERATOR_REFINE_WORK_GROUP_SIZE_X, local_size_y = 1, local_size_z = 1) in;

layout(binding = 0, r32ui) uniform writeonly uimage2D corner_buffer;
layout(binding = 0) uniform sampler2D delta_buffer;

layout(binding = 0, std430) buffer QuadIndirectBuffer
{
    QuadIndirect quad_indirect;
};

layout(binding = 1, std430) buffer QuadBuffer
{
    Quad quad_list[];
};

layout(binding = 2, std430) readonly buffer SrcRefineIndirectBuffer
{
    QuadIndirect src_refine_indirect;
};

layout(binding = 3, std430) readonly buffer SrcRefineBuffer
{
    Quad src_refine_list[];
};

layout(binding = 4, std430) buffer DstRefineIndirectBuffer
{
    QuadIndirect dst_refine_indirect;
};

layout(binding = 5, std430) buffer DstRefineBuffer
{
    Quad dst_refine_list[];
};

uniform float depth_threshold;

void main()
{
    uint src_index = gl_GlobalInvocationID.x;

    if(src_index >= src_refine_indirect.quad_count)
    {
        return;
    }

    ivec2 src_coord = ivec2(src_refine_list[src_index].coord);
    uint src_level = src_refine_list[src_index].level;

    vec2 delta = texelFetch(delta_buffer, src_coord, int(src_level)).xy;
    float depth_delta = delta.y - delta.x;

    if(depth_delta > depth_threshold)
    {
        for(uint offset_y = 0; offset_y < 2; offset_y++)
        {
            for(uint offset_x = 0; offset_x < 2; offset_x++)
            {
                ivec2 dst_coord = src_coord * 2 + ivec2(offset_x, offset_y);
                uint dst_index = atomicAdd(dst_refine_indirect.quad_count, 1);

                if((dst_index % QUAD_GENERATOR_REFINE_WORK_GROUP_SIZE_X) == 0)
                {
                    atomicAdd(dst_refine_indirect.group_count_x, 1);
                }

                dst_refine_list[dst_index].coord = u16vec2(dst_coord);
                dst_refine_list[dst_index].level = src_level - 1;
            }
        }
    }

    else
    {
        int quad_size = (1 << src_level);
        ivec2 quad_coord = src_coord * quad_size;
        ivec2 corner_resolution = ivec2(imageSize(corner_buffer));

        if(!is_outside(quad_coord, corner_resolution))
        {
            for(uint offset_y = 0; offset_y < 2; offset_y++)
            {
                for(uint offset_x = 0; offset_x < 2; offset_x++)
                {
                    ivec2 corner_coord = quad_coord + quad_size * ivec2(offset_x, offset_y);
                    corner_coord = clamp(corner_coord, ivec2(0), corner_resolution - ivec2(1));

                    imageStore(corner_buffer, corner_coord, uvec4(QUAD_GENERATOR_CORNER_ALLOCATE_FLAG));
                }
            }

            uint quad_index = atomicAdd(quad_indirect.quad_count, 1);

            if((quad_index % QUAD_GENERATOR_WRITE_WORK_GROUP_SIZE_X) == 0)
            {
                atomicAdd(quad_indirect.group_count_x, 1);
            }

            quad_list[quad_index].coord = u16vec2(src_coord);
            quad_list[quad_index].level = src_level;
        }
    }
}