#version 430
#extension GL_NV_gpu_shader5 : require

#include "shared_defines.glsl"
#include "shared_math_library.glsl"

layout(local_size_x = LOOP_GENERATOR_WRITE_WORK_GROUP_SIZE_X, local_size_y = LOOP_GENERATOR_WRITE_WORK_GROUP_SIZE_Y, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D depth_buffer;
layout(binding = 1) uniform usampler2D vector_buffer;

layout(binding = 0, r32ui) uniform readonly uimage2D loop_range_count_buffer;

layout(binding = 0, std430) buffer LoopRangeBuffer
{
    LoopRange loop_range_list[];
};

layout(binding = 1, std430) buffer LoopSegmentBuffer
{
    LoopSegment loop_segment_list[];
};

uniform float depth_max;
uniform uint cell_buffer_size;

ivec2 forward_closed[4] = ivec2[4]
(
    ivec2(-1,  0),
    ivec2( 0, -1),
    ivec2( 1,  0),
    ivec2( 0,  1)
);

uint get_range_offset(ivec2 cell_coord)
{
    uint image_width = imageSize(loop_range_count_buffer).x;

    return (cell_coord.y * image_width + cell_coord.x) * cell_buffer_size;
}

ivec2 get_bridge_neighbour_offset(ivec2 coord, bool is_edge)
{
    ivec2 local_coord = (coord + 1) % 2;
    uint local_index = 0;

    if (local_coord.y > 0) // Circular indexing
    {
        local_index = 3 - local_coord.x;
    }

    else
    {
        local_index = local_coord.x;
    }

    ivec2 offset = ivec2(0);

    if (is_edge)
    {
        offset = forward_closed[(local_index + 1) % 4];
    }

    else
    {
        offset = forward_closed[local_index];
    }

    return offset;
}

void main()
{
    ivec2 cell_coord = ivec2(gl_GlobalInvocationID);
    ivec2 image_size = imageSize(loop_range_count_buffer);

    if(any(greaterThanEqual(cell_coord, image_size)))
    {
        return;
    }

    uint range_count = imageLoad(loop_range_count_buffer, cell_coord).x;
    uint range_offset = get_range_offset(cell_coord);
    
    for(uint index = 0; index < range_count; index++)
    {
        uint range_index = range_offset + index;
        uint segment_count = loop_range_list[range_index].segment_count;
        uint segment_offset = loop_range_list[range_index].segment_offset;

        if(segment_count == 0 || segment_offset == EXPERIMENT_GENERATOR_INVALID_SEGMENT_OFFSET)
        {
            continue;
        }

        ivec2 previous_coord = ivec2(loop_range_list[range_index].previous_coord);
        ivec2 end_coord = ivec2(loop_range_list[range_index].end_coord);

        ivec2 current_coord = ivec2(loop_range_list[range_index].start_coord);
        uint current_direction = texelFetch(vector_buffer, previous_coord, 0).x;

        while(true)
        {
            uint encoded_direction = texelFetch(vector_buffer, current_coord, 0).x;
            ivec2 direction = decode_direction(encoded_direction);

            bool is_bridge = (encoded_direction & EXPERIMENT_GENERATOR_VECTOR_BRIDGE) != 0;

            if((encoded_direction & 0x03) != (current_direction & 0x03) || is_bridge)
            {
                float end_coord_depth = min(texelFetch(depth_buffer, current_coord / 2, 0).x, depth_max);

                if(is_bridge)
                {
                    bool is_edge = (encoded_direction & EXPERIMENT_GENERATOR_VECTOR_EDGE) != 0;

                    ivec2 neighbour_coord = current_coord + get_bridge_neighbour_offset(current_coord, is_edge);
                    uint neighbour_value = texelFetch(vector_buffer, neighbour_coord, 0).x;

                    bool is_neighbour_bridge = (neighbour_value & EXPERIMENT_GENERATOR_VECTOR_BRIDGE) != 0;
                    bool is_neighbour_edge = (neighbour_value & EXPERIMENT_GENERATOR_VECTOR_EDGE) != 0;

                    if((is_neighbour_bridge && (is_edge != is_neighbour_edge)))
                    {
                        end_coord_depth = -end_coord_depth; //Encode bridge coord using [-1.0, 0.0]
                    }

                    else if((encoded_direction & 0x03) != (current_direction & 0x03))
                    {
                        end_coord_depth = end_coord_depth; //Encode normal coord using [0.0, 1.0]
                    }

                    else
                    {
                        end_coord_depth = -2.0; //Encode invalid coord using ]-infinity, -1.0[
                    }
                }

                loop_segment_list[segment_offset].end_coord = u16vec2(current_coord);
                loop_segment_list[segment_offset].end_coord_depth = end_coord_depth;

                current_direction = encoded_direction;
                segment_offset++;
            }

            current_coord += direction;

            if(all(equal(current_coord, end_coord)))
            {
                break;
            }
        }
    }
}